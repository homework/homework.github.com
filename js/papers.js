// Generated by CoffeeScript 1.8.0

/*
 * 
 * Copyright (C) 2013 Richard Mortier <mort@cantab.net>.
 * All Rights Reserved.
 *
 * This program is free software; you can redistribute it and/or modify it
 * under the terms of the GNU General Public License version 2 as published by
 * the Free Software Foundation
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for
 * more details.
 *
 * You should have received a copy of the GNU General Public License along with
 * this program; if not, write to the Free Software Foundation, Inc., 59 Temple
 * Place - Suite 330, Boston, MA 02111-1307, USA.
 *
 */

(function() {
  var button, code, div, em, entry, footer, hd, li, link, month, p, papers, self, small, span, table, tbody, td, th, thead, tr, ul, wrap, _authors, _papers, _promises,
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  self = typeof exports !== "undefined" && exports !== null ? exports : this;

  _promises = [];

  _authors = null;

  _papers = null;

  wrap = function(tag, s, _arg) {
    var cl, colspan, id, literal;
    cl = _arg.cl, id = _arg.id, colspan = _arg.colspan, literal = _arg.literal;
    cl = cl != null ? "class='" + cl + "'" : "";
    id = id != null ? "id='" + id + "'" : "";
    colspan = colspan != null ? "colspan='" + colspan + "'" : "";
    literal = literal != null ? literal : "";
    return "<" + tag + " " + id + " " + cl + " " + colspan + " " + literal + ">" + s + "</" + tag + ">";
  };

  div = function(o, s) {
    return wrap("div", s, o);
  };

  span = function(o, s) {
    return wrap("span", s, o);
  };

  ul = function(o, lis) {
    return wrap("ul", lis, o);
  };

  li = function(o, s) {
    return wrap("li", s, o);
  };

  p = function(o, s) {
    return wrap("p", s, o);
  };

  small = function(o, s) {
    return wrap("small", s, o);
  };

  footer = function(o, s) {
    return wrap("footer", s, o);
  };

  button = function(o, s) {
    return wrap("button", s, o);
  };

  em = function(o, s) {
    return wrap("em", s, o);
  };

  table = function(o, s) {
    return wrap("table", s, o);
  };

  tbody = function(o, s) {
    return wrap("tbody", s, o);
  };

  thead = function(o, s) {
    return wrap("thead", s, o);
  };

  th = function(o, s) {
    return wrap("th", s, o);
  };

  tr = function(o, s) {
    return wrap("tr", s, o);
  };

  td = function(o, s) {
    return wrap("td", s, o);
  };

  hd = function(n, o, s) {
    return wrap("h" + n, s, o);
  };

  link = function(o, u, s) {
    o.literal = o.literal != null ? "href=\"" + u + "\" " + o.literal : "href=\"" + u + "\" ";
    return wrap("a", s, o);
  };

  month = function(m) {
    switch (m) {
      case "jan":
        return "January";
      case "feb":
        return "February";
      case "mar":
        return "March";
      case "apr":
        return "April";
      case "may":
        return "May";
      case "jun":
        return "June";
      case "jul":
        return "July";
      case "aug":
        return "August";
      case "sep":
        return "September";
      case "oct":
        return "October";
      case "nov":
        return "November";
      case "dec":
        return "December";
      default:
        return "";
    }
  };

  code = function(e) {
    var m, y;
    y = e.year;
    m = (function() {
      switch (e.month) {
        case "jan":
        case "January":
          return "01";
        case "feb":
        case "February":
          return "02";
        case "mar":
        case "March":
          return "03";
        case "apr":
        case "April":
          return "04";
        case "may":
        case "May":
          return "05";
        case "jun":
        case "June":
          return "06";
        case "jul":
        case "July":
          return "07";
        case "aug":
        case "August":
          return "08";
        case "sep":
        case "September":
          return "09";
        case "oct":
        case "October":
          return "10";
        case "nov":
        case "November":
          return "11";
        case "dec":
        case "December":
          return "12";
        default:
          return "00";
      }
    })();
    return "" + y + "-" + m;
  };

  entry = function(e) {
    var address, authors, links, venue;
    authors = e.author.map(function(a) {
      var name;
      name = a.replace(/\b(\w)\w+ /, "$1. ").replace(/(\w\.) (\w\.)/, "$1$2").replace(/(\w\.) (\w\.)/, "$1$2");
      if (a in _authors) {
        name = link({}, _authors[a], name);
      }
      return span({
        cl: "author"
      }, name);
    });
    venue = (function() {
      switch (e._type) {
        case "inproceedings":
          return e.booktitle;
        case "article":
          return "" + e.journal + ", " + e.volume + " (" + e.number + "):" + e.pages;
        case "inbook":
          return "" + e.title + " " + e.chapter + ", " + e.publisher;
        case "techreport":
          return "" + e.number + ", " + e.institution;
        case "patent":
          return e.number;
        default:
          return "";
      }
    })();
    address = __indexOf.call(e, "address") >= 0 ? span({
      cl: "address"
    }, "" + e.address + ".") : "";
    links = "pdf" in e ? link({
      cl: "url pdf"
    }, e.pdf, "pdf ") : "";
    return div({
      cl: "paper",
      id: "" + e._key
    }, (link({}, "#" + e._key, " ")) + (span({
      cl: "linkbar"
    }, links)) + (span({
      cl: "title"
    }, e.title)) + '<br>' + authors.join(", ") + '<br>' + ("" + (span({
      cl: "venue"
    }, venue)) + ". ") + (e.note ? "" + e.note + ". " : '') + ("" + (month(e.month)) + " " + e.year + ". " + address));
  };

  papers = {
    fetch: function(au, pu) {
      _promises.push($.Deferred(function(promise) {
        return $.getJSON(au, function(data) {
          _authors = data;
          return promise.resolve();
        });
      }));
      _promises.push($.Deferred(function(promise) {
        return $.getJSON(pu, function(data) {
          _papers = data;
          return promise.resolve();
        });
      }));
      return this;
    },
    render: function(tgt) {
      $.when.apply(null, _promises).then((function(_this) {
        return function() {
          var entries, last, oy, tool, ym, yms;
          $(tgt).html('');
          tool = link({}, _papers.tool.url, _papers.tool.name);
          $(tgt).prepend(div({
            cl: "muted clearfix",
            id: "tool"
          }, "Generated by " + tool + " on " + _papers.date + "."));
          $(tgt).append(div({
            cl: "break"
          }, ''));
          entries = {};
          yms = [];
          $.each(_papers.records, function(k, e) {
            e._key = k;
            k = code(e);
            if (entries[k] == null) {
              entries[k] = [];
            }
            return entries[k].push(e);
          });
          yms = ((function() {
            var _results;
            _results = [];
            for (ym in entries) {
              _results.push(ym);
            }
            return _results;
          })()).sort().reverse();
          oy = null;
          last = false;
          return $.each(yms, function(i, ym) {
            var y;
            y = ym.split("-")[0];
            if (oy === null || y !== oy) {
              if (oy !== null) {
                $(tgt).append(div({
                  cl: "break"
                }, ''));
              }
              $(tgt).append(div({
                cl: "year",
                id: "y-" + y
              }, y));
              oy = y;
            }
            return $.each(entries[ym], function(i, e) {
              return $(tgt).append(entry(e));
            });
          });
        };
      })(this));
      return this;
    }
  };

  self.papers = papers;

}).call(this);
